; Justin Cole & Michael Chen Project 4



; Addresses for I/O
.NAME 	IOBASE= 0xF0000000
.NAME	OFSHEX= 0x00000000
.NAME	OFSLEDR=0x00000004
.NAME	OFSLEDG=0x00000008
.NAME	OFSKEY =0x00000010 ;KDATA
.NAME 	KCTRL  =0x00000110 ;KCTRL
.NAME	OFSSW  =0x00000014 ;SDATA
.NAME 	SCTRL  =0x00000114 ;SCTRL
.NAME 	TCNT   =0x00000020 ;TCNT
.NAME 	TLIM   =0x00000024 ;TLIM
.NAME 	TCTL   =0x00000120 ;TCTL 



;a0 stores state of timer. 00 = seconds, 01 = minutes, 11 = set, 100 = running 
;a1 read from keys
;a2 store seconds
;a3 store current HEX value
;t0 always equal to zero 
;t1 compare key values
;s0 
;s1 add delay to timer
;s2


.ORIG 0x40
Set:
	mvhi	gp,IOBASE 
	andi 	a0, a0, 0
	andi 	a1, a1, 0
	andi 	t0, t0, 0
	andi 	t1, t1, 0
	andi 	s0, s0, 0
	andi	s2, s2, 0
	andi 	rv, rv, 0
	addi	s1, s1, 2
	
	addi	a0, a0, 1000
	sw 		a0, TLIM(gp) ; Set the timer limit

	sw 		t0, OFSLEDR(gp)


Wait0:   ;wait for key to be released
	lw		a1, OFSKEY(gp) ;check key
	bne		t0, a1, Wait0


SetSeconds:
	andi 	a0, a0, 0
	addi	a0, a0, 1
	sw 		a0, OFSLEDG(gp) ; store state in LEDG
	lw		a3, OFSSW(gp) ; get value from switches
	andi 	a3, a3, 0x00FF ; mask it - only care about first 8 switches
	sw		a3,OFSHEX(gp) ; store switch value in HEX
	lw		a1, OFSKEY(gp) ;check key
	andi	t1, t1, 0
	addi	t1, t1, 2 ;if KEY[1], go to minutes
	andi 	a2, a2, 0
	add 	a2, a2, a3
	bne		t1, a1, SetSeconds

Wait1:   ;wait for key to be released
	lw		a1, OFSKEY(gp) ;check key
	bne		t0, a1, Wait1

SetMinutes:
	andi 	a0, a0, 0
	addi	a0, a0, 2
	sw		a0, OFSLEDG(gp) ;store state on ledg
	lw		a3, OFSSW(gp) ; get value from switches
	andi 	a3, a3, 0x00FF
	add 	a3, a3, a3
	add 	a3, a3, a3
	add 	a3, a3, a3
	add 	a3, a3, a3	
	add 	a3, a3, a3
	add 	a3, a3, a3
	add 	a3, a3, a3
	add 	a3, a3, a3 ;shift
	or 		a3, a3, a2
	sw		a3,OFSHEX(gp) ; store switch value in HEX
	lw		a1, OFSKEY(gp) ;check key
	andi	t1, t1, 0
	addi	t1, t1, 1 ;if KEY[0], reset
	beq 	t1, a1, Set
	addi	t1, t1, 1 ;if KEY[1], TimeSet
	bne		t1, a1, SetMinutes
	

Wait2:   ;wait for key to be released
	lw		a1, OFSKEY(gp) ;check key
	bne		t0, a1, Wait2

TimeSet:
	andi 	a0, a0, 0
	addi 	a0, a0, 3 ; increment state to 11
	sw		a0, OFSLEDG(gp) ;store state on ledg
	lw		a1, OFSKEY(gp) ;check key
	andi	t1, t1, 0
	
	addi	t1, t1, 1
	beq		a1, t1, Set		;if Reset then go to set
	
	addi	t1, t1, 3
	bne		a1, t1, TimeSet	;if button=startm continue, else loop

	
Wait3:   ;wait for key to be released
	lw		a1, OFSKEY(gp) ;check key
	bne		t0, a1, Wait3

CountDown:
	sw 		t0, OFSLEDG(gp)
	beq 	a3, t0, Finished
	subi 	a3, a3, 1
	jal 	ra, Wait(t0) ; waste some time
	jal 	ra, CheckSeconds(t0)
	sw 		a3, OFSHEX(gp) ;decrement hex value
	bne 	t0, a3, CountDown

Finished:
	sw		t0, TCTL(gp)	;	Reset the timer
	not 	a3, a3			;	Change the Led state
	sw 		a3, OFSLEDR(gp) 
FinishedLoop:
	lw		a1, OFSKEY(gp) 	;	Check the keys
	andi	t1, t1, 0
	addi	t1, t1, 1 		;	If the reset key is pressed, restart
	beq 	a1, t1, Set
	
	lw 		s1, TCTL(gp)	;	Check if it's time to change the LED
	beq		t0, s1, FinishedLoop
	beq		t0, t0, Finished	;Change the color


Wait:
	sw		t0, TCTL(gp)	;	Reset the timer
WaitLoop:
	lw		a1, OFSKEY(gp) 	;	Check Reset Button
	andi	t1, t1, 0
	addi	t1, t1, 1 
	beq 	a1, t1, set	   	;	If KEY[0], reset
	addi	t1, t1, 3 		
	beq 	a1, t1, Wait2	;	if KEY[2], pause
	lw 		s1, TCTL(gp)
	beq		t0, s1, WaitLoop
	ret

CheckSeconds: 
	andi 	a2, a3, 0x000F 	;	Check seconds
	andi	s2, s2, 0
	addi 	s2, s2, 0x000F
	bne		a2,	s2,	CheckTens
	andi 	a3, a3, -16 	; 	Remove the seconds (0xFFF0 == -16)
	addi 	a3, a3, 0x0009 	; 	Seconds = x9
	
CheckTens:
	andi 	a2, a3, 0x00F0 	;	Check 10's seconds
	andi	s2, s2, 0
	addi 	s2, s2, 0x00F0
	bne		a2,	s2,	CheckOnesMinutes
	andi 	a3, a3, -241 	; 	Remove the seconds (0xFF0F == -241)
	addi 	a3, a3, 0x0050 	; 	Seconds = 5x
	
CheckOnesMinutes: 	;check for xFxx
	andi 	a2, a3, 0x0F00 	;	Check seconds
	andi	s2, s2, 0
	addi 	s2, s2, 0x0F00
	bne		a2,	s2,	Fin
	andi 	a3, a3, -3841 	; 	Remove the seconds (0xF0FF == -3841)
	addi 	a3, a3, 0x0900
Fin:
	ret
	

